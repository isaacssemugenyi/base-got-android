package com.bcs.basegpt;

import androidx.appcompat.app.AppCompatActivity;

import android.app.AlertDialog;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.os.Bundle;
import android.text.method.ScrollingMovementMethod;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ProgressBar;
import android.widget.TextView;

import com.bcs.basegpt.api.ApiService;
import com.bcs.basegpt.api.Chat;

import java.util.concurrent.TimeUnit;

import okhttp3.OkHttpClient;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

public class MainActivity extends AppCompatActivity {
    EditText chatInput;
    TextView chatOutput, messageSource;
    Button chatBtn, historyBtn;
    SQLiteDatabase myDb;
    ProgressBar spinner;

    OkHttpClient.Builder httpClientBuilder = new OkHttpClient.Builder()
            .connectTimeout(60, TimeUnit.SECONDS)
            .readTimeout(60, TimeUnit.SECONDS)
            .writeTimeout(60, TimeUnit.SECONDS);

    /**
     * Retrofit builder to make calls to the API
     */
    Retrofit retrofit = new Retrofit.Builder()
//            .baseUrl("http://10.0.2.2:3000/")
//            .baseUrl("https://carpedia-api-20-0-2.onrender.com/")
            .baseUrl("http://172.104.156.79:4000/")
            .addConverterFactory(GsonConverterFactory.create())
            .client(httpClientBuilder.build())
            .build();

    ApiService apiService = retrofit.create(ApiService.class);

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        
        chatBtn = findViewById(R.id.searchBtn);
        historyBtn= findViewById(R.id.historyBtn);
        chatOutput = findViewById(R.id.resultMessage);
        chatOutput.setMovementMethod(new ScrollingMovementMethod());
        chatInput = findViewById(R.id.inputText);
        messageSource = findViewById(R.id.textView2);
        spinner = findViewById(R.id.spinner);
        chatInput.requestFocus();

        myDb = openOrCreateDatabase("answersdb", MODE_PRIVATE, null);

        myDb.execSQL("CREATE TABLE IF NOT EXISTS answers(id INTEGER PRIMARY KEY AUTOINCREMENT, question VARCHAR, answer VARCHAR);");

        askAQuestion();
        viewHistory();
    }


    private void askAQuestion(){
        chatBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if(chatInput.getText().toString().trim().length() == 0){
                    showMessage("Error", "You can't search with an empty field");
                    return;
                } else {
                    String screenInputValue = chatInput.getText().toString();

//                    Check local db for the results
                    String resultFromDB = checkAndRetrieveFromDb(screenInputValue);

//                    if found put to the textView
                    if (resultFromDB != "") {
                        chatOutput.setText(resultFromDB);
                        messageSource.setText("Results retrieved from previous results");
                        chatInput.setText("");
                        chatInput.clearFocus();
                        return;
                    } else {
//                    If not found, call the api
                        Chat newChat = new Chat();
                        newChat.setMessage(screenInputValue);

                        spinner.setVisibility(View.VISIBLE);
                        chatBtn.setEnabled(false);
                        chatBtn.setText("Loading....");
//                        chatBtn.setBackgroundColor(Color.parseColor("#c72c2c"));
                        Call<Chat> call = apiService.askAQuestion(newChat);

                        call.enqueue(new Callback<Chat>() {
                            @Override
                            public void onResponse(Call<Chat> call, Response<Chat> response) {
                                if (response.isSuccessful() && response.body() != null) {
                                    Chat createdChat = response.body();
                                    chatOutput.setText(createdChat.getMessage());
                                    chatInput.setText("");
                                    messageSource.setText("Results generated by LLAMA & saved locally");

//                                save to db
                                    saveApiResponse(screenInputValue, createdChat.getMessage());
                                    spinner.setVisibility(View.GONE);
                                    chatBtn.setEnabled(true);
                                    chatBtn.setText("Search");
//                                    chatBtn.setBackgroundColor(Color.parseColor("#c72c2c"));
                                    Log.d("Api response", "onResponse: Message successfully retrieved.");
                                }
                            }

                            @Override
                            public void onFailure(Call<Chat> call, Throwable t) {
                                Log.d("Failure", "onFailure: " + t.getMessage());
                                showMessage("Error", t.getMessage());
                                spinner.setVisibility(View.GONE);
                                chatBtn.setEnabled(true);
                                chatBtn.setText("Search");
                            }
                        });

                    }
                }
            }
        });
    }

    private void saveApiResponse(String question, String answer){
        String trimmedAnswer = answer.replaceAll("\"", "")
        .replaceAll("\'", "");

        myDb.execSQL(String.format("INSERT INTO answers(question, answer) VALUES('%s','%s');", question, trimmedAnswer));
    }

    private String checkAndRetrieveFromDb(String question){
        Cursor result = myDb.rawQuery("SELECT * FROM answers WHERE LOWER(question) GLOB LOWER('"+question+"')", null);
        if(result.moveToFirst()) {
            return result.getString(2);
        }

        return "";
    }


    public void showMessage(String title, String message){
        AlertDialog.Builder builder = new AlertDialog.Builder(this);

        builder
                .setCancelable(true)
                .setTitle(title)
                .setMessage(message)
                .show();
    }

    private void viewHistory(){
        historyBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent addIntent = new Intent(getApplicationContext(), ListActivity.class);
                startActivity(addIntent);
            }
        });
    }
}